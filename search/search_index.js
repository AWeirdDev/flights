var __index = {"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"zh-TW/index.html","title":"Fast Flights","text":"<p>A fast, robust Google Flights scraper (API) for Python. (Probably)</p> <p><code>fast-flights</code> uses Base64-encoded Protobuf strings to generate the <code>tfs</code> query parameter, which stores all the information for a lookup request. We then parse the HTML content and extract the info we need using <code>selectolax</code>.</p> <pre><code>pip install fast-flights\n</code></pre>"},{"location":"zh-TW/index.html#getting-started","title":"Getting started","text":"<p>Here's <code>fast-flights</code> in 3 steps:</p> <ol> <li>Import the package</li> <li>Add the filters</li> <li>Search for flights</li> </ol> <p>How simple is that? (...and beginner-friendly, too!)</p> <pre><code>from fast_flights import FlightData, Passengers, Result, get_flights\n\nresult: Result = get_flights(\n    flight_data=[\n        FlightData(date=\"2025-01-01\", from_airport=\"TPE\", to_airport=\"MYJ\")# (1)!\n    ],\n    trip=\"one-way\",# (2)!\n    seat=\"economy\",# (3)!\n    passengers=Passengers(adults=2, children=1, infants_in_seat=0, infants_on_lap=0),# (4)!\n    fetch_mode=\"fallback\",#(5)!\n)\n\nprint(result)\n</code></pre> <ol> <li> This specifies the (desired) date of departure for the outbound flight. Make sure to change the date!</li> <li> This specifies the trip type (<code>round-trip</code> or <code>one-way</code>). Note that <code>multi-city</code> is not yet supported. Note that if you're having a <code>round-trip</code>, you need to add more than one item of flight data (in other words, 2+).</li> <li> Money-spending time! This specifies the seat type, which is <code>economy</code>, <code>premium-economy</code>, <code>business</code>, or <code>first</code>.</li> <li> Nice interface, eh? This specifies the number of a specific passenger type.</li> <li> Sometimes, the data is built on demand on the client-side, while the core of <code>fast-flights</code> is built around scrapers from the ground up. We support fallbacks that run Playwright serverless functions to fetch for us instead. You could either specify <code>common</code> (default), <code>fallback</code> (recommended), or <code>force-fallback</code> (100% serverless Playwright). You do not need to install Playwright in order for this to work.</li> </ol>"},{"location":"zh-TW/index.html#how-its-made","title":"How it's made","text":"<p>The other day, I was making a chat-interface-based trip recommendation app and wanted to add a feature that can search for flights available for booking. My personal choice is definitely Google Flights since Google always has the best and most organized data on the web. Therefore, I searched for APIs on Google.</p> <p>\ud83d\udd0e Search  google flights api</p> <p>The results? Bad. It seems like they discontinued this service and it now lives in the Graveyard of Google.</p> <p><sup>\ud83e\uddcf\u200d\u2642\ufe0f duffel.com</sup> <sup>Google Flights API: How did it work &amp; what happened to it? <p>The Google Flights API offered developers access to aggregated airline data, including flight times, availability, and prices. Over a decade ago, Google announced the acquisition of ITA Software Inc. which it used to develop its API. However, in 2018, Google ended access to the public-facing API and now only offers access through the QPX enterprise product.</p> <p>That's awful! I've also looked for free alternatives but their rate limits and pricing are just \ud83d\ude2c (not a good fit/deal for everyone).</p> <p></p> <p>However, Google Flights has their UI \u2013 flights.google.com. So, maybe I could just use Developer Tools to log the requests made and just replicate all of that? Undoubtedly not! Their requests are just full of numbers and unreadable text, so that's not the solution.</p> <p>Perhaps, we could scrape it? I mean, Google allowed many companies like Serpapi to scrape their web just pretending like nothing happened... So let's scrape our own.</p> <p>\ud83d\udd0e Search  google flights api scraper pypi</p> <p>Excluding the ones that are not active, I came across hugoglvs/google-flights-scraper on Pypi. I thought to myself: \"aint no way this is the solution!\"</p> <p>I checked hugoglvs's code on GitHub, and I immediately detected \"playwright,\" my worst enemy. One word can describe it well: slow. Two words? Extremely slow. What's more, it doesn't even run on the \ud83d\uddfb Edge because of configuration errors, missing libraries... etc. I could just reverse try.playwright.tech and use a better environment, but that's just too risky if they added Cloudflare as an additional security barrier \ud83d\ude33.</p> <p>Life tells me to never give up. Let's just take a look at their URL params...</p> <pre><code>https://www.google.com/travel/flights/search?tfs=CBwQAhoeEgoyMDI0LTA1LTI4agcIARIDVFBFcgcIARIDTVlKGh4SCjIwMjQtMDUtMzBqBwgBEgNNWUpyBwgBEgNUUEVAAUgBcAGCAQsI____________AZgBAQ&amp;hl=en\n</code></pre> Param Content My past understanding hl en Sets the language. tfs CBwQAhoeEgoyMDI0LTA1LTI4agcIARID\u2026 What is this???? \ud83e\udd2e\ud83e\udd2e <p>I removed the <code>?tfs=</code> parameter and found out that this is the control of our request! And it looks so base64-y.</p> <p>If we decode it to raw text, we can still see the dates, but we're not quite there \u2014 there's too much unwanted Unicode text.</p> <p>Or maybe it's some kind of a data-storing method Google uses? What if it's something like JSON? Let's look it up.</p> <p>\ud83d\udd0e Search  google's json alternative</p> <p>\ud83d\udc23 Result Solution: The Power of Protocol Buffers</p> <p>LinkedIn turned to Protocol Buffers, often referred to as protobuf, a binary serialization format developed by Google. The key advantage of Protocol Buffers is its efficiency, compactness, and speed, making it significantly faster than JSON for serialization and deserialization.</p> <p>Gotcha, Protobuf! Let's feed it to an online decoder and see how it does:</p> <p>\ud83d\udd0e Search  protobuf decoder</p> <p>\ud83d\udc23 Result protobuf-decoder.netlify.app</p> <p>I then pasted the Base64-encoded string to the decoder and no way! It DID return valid data!</p> <p></p> <p>I immediately recognized the values \u2014 that's my data, that's my query!</p> <p>So, I wrote some simple Protobuf code to decode the data.</p> <pre><code>syntax = \"proto3\"\n\nmessage Airport {\n    string name = 2;\n}\n\nmessage FlightInfo {\n    string date = 2;\n    Airport dep_airport = 13;\n    Airport arr_airport = 14;\n}\n\nmessage GoogleSucks {\n    repeated FlightInfo = 3;\n}\n</code></pre> <p>It works! Now, I won't consider myself an \"experienced Protobuf developer\" but rather a complete beginner.</p> <p>I have no idea what I wrote but... it worked! And here it is, <code>fast-flights</code>.</p>"},{"location":"zh-TW/index.html#contributing","title":"Contributing","text":"<p>Feel free to contribute! Though I won't be online that often, I'll try my best to answer all the whats, hows &amp; WTFs.</p> <p> Acknowledgements:</p> <ul> <li>@d2x made their first contribution in #7</li> <li>@PTruscott made their first contribution in #19</li> <li>@artiom-matvei made their first contribution in #20</li> <li>@esalonico fixed v2.0 currency issues in #25</li> <li>@NickJLange helped add a LICENSE file in #38</li> <li>@Lim0H (#39) and @andreaiorio (#41) fixed <code>primp</code> client issues.</li> <li>@kiinami (#43) added local Playwright support</li> </ul>"},{"location":"zh-TW/airports.html","title":"Airports","text":"<p>To search for an airport, you could use the <code>search_airports()</code> API:</p> <pre><code>airport = search_airports(\"taipei\")[0]\nairport\n# Airport.TAIPEI_SONGSHAN_AIRPORT\n</code></pre> <p>If you're unfamiliar with those 3-letter airport codes (such as \"MYJ\" for Matsuyama, \"TPE\" for Taipei, \"LAX\" for Los Angeles, etc.), you could pass in an <code>Airport</code> enum to a <code>FlightData</code> object:</p> <pre><code>taipei = search_airports(\"taipei\")[0]\nlos = search_airports(\"los angeles\")[0]\n\nfilter = create_filter(\n    flight_data=[\n        FlightData(\n            date=\"2025-01-01\",\n            from_airport=taipei,\n            to_airport=los\n        )\n    ],\n    ...\n)\n</code></pre> <p>I love airports. Navigating them was like an adventure when I was a kid. I really thought that airports have everything in them, I even drew an entire airport containing (almost) a city at this point... naively.</p>"},{"location":"zh-TW/fallbacks.html","title":"Fallbacks","text":"<p>Just in case anything goes wrong, we've added falbacks extending Playwright serverless functions:</p> <pre><code>get_flights(\n    ..., \n    fetch_mode=\"fallback\"  # common/fallback/force-fallback\n)\n\n# ...or:\n\nget_fights_from_filter(\n    filter, \n    mode=\"fallback\"  # common/fallback/force-fallback\n)\n</code></pre> <p>There are a few modes for fallbacks:</p> <ul> <li><code>common</code> \u2013 This uses the standard scraping process.</li> <li><code>fallback</code> \u2013 Enables a fallback support if the standard process fails.</li> <li><code>force-fallback</code> \u2013 Forces using the fallback.</li> </ul> <p>Some flight request data are displayed upon client request, meaning it's not possible for traditional web scraping. Therefore, if we used Playwright, which uses Chromium (a browser), and fetched the inner HTML, we could make the original scraper work again! Magic </p>"},{"location":"zh-TW/filters.html","title":"Filters","text":"<p>Filters are used to generate the <code>tfs</code> query parameter. In short, you make queries with filters.</p> <p>With the new API, there's no need to use the <code>create_filter()</code> function, as you can use <code>get_flights()</code> and add the filter parameters directly.</p> <pre><code>get_flights(..., fetch_mode=\"fallback\")\n\n# is equivalent to:\n\nfilter = create_filter(...)\nget_flights_from_filter(filter, mode=\"fallback\")\n</code></pre>"},{"location":"zh-TW/filters.html#flightdata","title":"FlightData","text":"<p>This specifies the general flight data: the date, departure &amp; arrival airport, and the maximum number of stops (untested).</p> <pre><code>data = FlightData(\n    date=\"2025-01-01\", \n    from_airport=\"TPE\", \n    to_airport=\"MYJ\", \n    airlines=[\"DL\", \"AA\", \"STAR_ALLIANCE\"], # optional\n    max_stops=10  # optional\n)\n</code></pre> <p>Note that for <code>round-trip</code> trips, you'll need to specify more than one <code>FlightData</code> object for the <code>flight_data</code> parameter.</p> <p>The values in <code>airlines</code> has to be a valid 2 letter IATA airline code, case insensitive. They can also be one of <code>SKYTEAM</code>, <code>STAR_ALLIANCE</code> or <code>ONEWORLD</code>. Note that the server side currently ignores the <code>airlines</code> parameter added to the <code>FlightData</code>s of all the flights which is not the first flight. In other words, if you have two <code>FlightData</code>s for a <code>round-trip</code> trip: JFK-MIA and MIA-JFK, and you add <code>airlines</code> parameter to both <code>FlightData</code>s, only the first <code>airlines</code> will be considered for the whole search. So technically <code>airlines</code> could be a better fit as a parameter for <code>TFSData</code> but adding to <code>FlightData</code> is the correct usage because if the backend changes and brings more flexibility to filter with different airlines for different flight segments in the future, which it should, this will come in handy.</p>"},{"location":"zh-TW/filters.html#trip","title":"Trip","text":"<p>Either one of:</p> <ul> <li><code>round-trip</code></li> <li><code>one-way</code></li> <li> <code>multi-city</code> (unimplemented)</li> </ul> <p>...can be used.</p> <p>If you're using <code>round-trip</code>, see FlightData.</p>"},{"location":"zh-TW/filters.html#seat","title":"Seat","text":"<p>Now it's time to see who's the people who got $$$ dollar signs in their names. Either one of:</p> <ul> <li><code>economy</code></li> <li><code>premium-economy</code></li> <li><code>business</code></li> <li><code>first</code></li> </ul> <p>...can be used, sorted from the least to the most expensive.</p>"},{"location":"zh-TW/filters.html#passengers","title":"Passengers","text":"<p>A family trip? No problem. Just tell us how many adults, children &amp; infants are there.</p> <p>There are some checks made, though:</p> <ul> <li>The sum of <code>adults</code>, <code>children</code>, <code>infants_in_seat</code> and <code>infants_on_lap</code> must not exceed <code>9</code>.</li> <li>You must have at least one adult per infant on lap (which frankly, is easy to forget).</li> </ul> <pre><code>passengers = Passengers(\n    adults=2,\n    children=1,\n    infants_in_seat=0,\n    infants_on_lap=0\n)\n</code></pre>"},{"location":"zh-TW/filters.html#example","title":"Example","text":"<p>Here's a simple example on how to create a filter:</p> <pre><code>filter: TFSData = create_filter(\n    flight_data=[\n        FlightData(\n            date=\"2025-01-01\",\n            from_airport=\"TPE\",\n            to_airport=\"MYJ\",\n        )\n    ],\n    trip=\"round-trip\",\n    passengers=Passengers(adults=2, children=1, infants_in_seat=0, infants_on_lap=0),\n    seat=\"economy\",\n    max_stops=1,\n)\n\nfilter.as_b64()  # Base64-encoded (bytes)\nfilter.to_string()  # Serialize to string\n</code></pre>"},{"location":"zh-TW/local.html","title":"Local Playwright","text":"<p>In case the Playwright serverless functions are down or you prefer not to use them, you can run the Playwright server locally and request against that.</p> <ol> <li>Install this package with the dependencies needed for Playwright:</li> </ol> <pre><code>pip install fast-flights[local]\n</code></pre> <ol> <li>Install the Playwright browser:</li> </ol> <pre><code>python -m playwright install chromium # or `python -m playwright install` if you want to install all browsers\n</code></pre> <ol> <li>Now you can use the <code>fetch_mode=\"local\"</code> parameter in <code>get_flights</code>:</li> </ol> <pre><code>get_flights(\n    ...,\n    fetch_mode=\"local\"  # common/fallback/force-fallback/local\n)\n\n# ...or:\n\nget_fights_from_filter(\n    filter,\n    mode=\"local\"  # common/fallback/force-fallback/local\n)\n</code></pre>"}]}